/*
 * Copyright (C) 2016 GedMarc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package za.co.mmagon.jwebswing.components.jstree;

import org.junit.Assert;
import org.junit.Test;
import za.co.mmagon.BaseTestClass;
import za.co.mmagon.jwebswing.Page;
import za.co.mmagon.jwebswing.components.jstree.themes.JSTreeDefaultDarkTheme;

/**
 *
 * @author GedMarc
 */
public class JSTreeTest extends BaseTestClass
{

    public JSTreeTest()
    {
    }

    @Test
    public void testPreConfigure()
    {
        Page p = getInstance();
        JSTree tree = new JSTree();
        tree.setID("id");
        p.getBody().add(tree);
        System.out.println(p.toString(true));

        Assert.assertEquals("<!DOCTYPE html>\n"
                + "<html>\n"
                + "	<body id=\"body\" ng-app=\"jwApp\" ng-controller=\"jwController\">\n"
                + "		<div id=\"id\"></div>\n"
                + "		<!-- Angular Application -->\n"
                + "		<script src=\"bower_components/jquery-3/dist/jquery.js\" type=\"text/javascript\"></script>\n"
                + "		<script src=\"bower_components/jquery-migrate/jquery-migrate.js\" type=\"text/javascript\"></script>\n"
                + "		<script src=\"bower_components/angular/angular.js\" type=\"text/javascript\"></script>\n"
                + "		<script src=\"bower_components/jstree/dist/jstree.js\" type=\"text/javascript\"></script>\n"
                + "		<script type=\"application/javascript\">//***********************************\n"
                + "// Angular Implementation\n"
                + "//***********************************\n"
                + "(function (angular) {\n"
                + "    'use strict';\n"
                + "    \n"
                + "    /**\n"
                + "     * All Modules\n"
                + "     */\n"
                + "    var jwApp = angular.module('jwApp',[]);\n"
                + "    \n"
                + "    /**\n"
                + "     * All Directives\n"
                + "     */\n"
                + "    \n"
                + "    \n"
                + "    /**\n"
                + "     * All Controllers\n"
                + "     */\n"
                + "    /* global jwApp, BootstrapDialog */\n"
                + "\n"
                + "jwApp.controller('jwController', function ($scope, $compile, $parse, $timeout) {\n"
                + "\n"
                + "    var self = this;\n"
                + "    /**\n"
                + "     * Loads up the initial variables into angular\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope._init = function ()\n"
                + "    {\n"
                + "        try\n"
                + "        {\n"
                + "            if (window.Modernizr)\n"
                + "            {\n"
                + "                $scope.Modernizr = window.Modernizr;\n"
                + "            }\n"
                + "        } catch (e)\n"
                + "        {\n"
                + "            console.warn(\"moderniz not enabled\");\n"
                + "        }\n"
                + "\n"
                + "        var toGo = 'jwad?o=body';\n"
                + "        $.ajax({\n"
                + "            type: \"GET\",\n"
                + "            url: toGo,\n"
                + "            dataType: \"json\",\n"
                + "            contentType: 'application/json',\n"
                + "            mimeType: 'application/json',\n"
                + "            asynch: false,\n"
                + "            cache: false,\n"
                + "            converters: {\n"
                + "                'json': true\n"
                + "            },\n"
                + "            success: function (result, status, xhr) {\n"
                + "                //alert(\"result : \" + result);\n"
                + "                $scope.loadData(result);\n"
                + "            },\n"
                + "            fail: function (xhr, textStatus, errorThrown) {\n"
                + "                var err = eval(\"(\" + xhr.responseText + \")\");\n"
                + "                BootstrapDialog.show({\n"
                + "                    title: \"Server Error\",\n"
                + "                    message: \"An error was encountered during the initial phase between the server and the client.<br>\" + textStatus + \"<br>\" + err,\n"
                + "                    type: BootstrapDialog.TYPE_DANGER,\n"
                + "                    buttons: [{\n"
                + "                            label: 'Close',\n"
                + "                            action: function (dialogItself) {\n"
                + "                                dialogItself.close();\n"
                + "                            }\n"
                + "                        }]\n"
                + "                });\n"
                + "            }\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    $scope._init();\n"
                + "\n"
                + "    /**\n"
                + "     * Loads an angular JSON variables object from the server\n"
                + "     * @param {type} data\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.loadData = function (data) {\n"
                + "        $.each(data.variables, function (i, item) {\n"
                + "            var the_string = item.variableName;\n"
                + "            var model = $parse(the_string);\n"
                + "            model.assign($scope, item.variable);\n"
                + "        });\n"
                + "\n"
                + "        $timeout(function () {});\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Performs a post send to the server\n"
                + "     * @param {type} $event\n"
                + "     * @param {type} dataVariables\n"
                + "     * @param {type} eventId\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.perform = function ($event, dataVariables, eventId) {\n"
                + "        if (window.Pace)\n"
                + "            window.Pace.start();\n"
                + "        //alert('doing stuff');\n"
                + "        var eventStuff = $scope.getEventObject($event);\n"
                + "        //alert(JSON.stringify($event));\n"
                + "        var element = $event.currentTarget.id;\n"
                + "        var getdate = new Date();\n"
                + "        var article = new Object();\n"
                + "        article.componentId = element;\n"
                + "        article.eventType = $event.type;\n"
                + "        article.eventTypeFrom = $event.type;\n"
                + "        article.datetime = getdate;\n"
                + "        article.value = eventStuff;\n"
                + "        article.eventId = eventId;\n"
                + "\n"
                + "        article.variableData = [];\n"
                + "        for (var i = 0; i < dataVariables.length; i++)\n"
                + "        {\n"
                + "            var arrItem = dataVariables[i];\n"
                + "            try\n"
                + "            {\n"
                + "                var data = $scope.$eval(arrItem);\n"
                + "                if (data !== 'undefined')\n"
                + "                {\n"
                + "                    var jsonVariable = {};\n"
                + "                    jsonVariable.variableName = arrItem; //the name\n"
                + "                    jsonVariable.variableText = data; //transforms to string on the server via deserializer\n"
                + "                    jsonVariable.$jwid = data.$jwid;\n"
                + "                    article.variableData.push(jsonVariable);\n"
                + "                }\n"
                + "            } catch (e)\n"
                + "            {\n"
                + "                console.log(\"Unable to find variable \" + arrItem);\n"
                + "            }\n"
                + "        }\n"
                + "        //article.variableData = [].concat(dataVariables);\n"
                + "\n"
                + "        $.ajax({\n"
                + "            type: \"POST\",\n"
                + "            url: \"jwajax\",\n"
                + "            data: JSON.stringify(article),\n"
                + "            dataType: \"json\",\n"
                + "            contentType: 'application/json',\n"
                + "            mimeType: 'application/json',\n"
                + "            asynch: true,\n"
                + "            cache: true,\n"
                + "            converters: {\n"
                + "                'json': true\n"
                + "            },\n"
                + "            success: function (result, status, xhr) {\n"
                + "                $scope.processResponse(result, status, xhr);\n"
                + "                try\n"
                + "                {\n"
                + "                    if (window.Pace)\n"
                + "                        window.Pace.stop();\n"
                + "                } catch (e)\n"
                + "                {\n"
                + "\n"
                + "                }\n"
                + "            },\n"
                + "            fail: function (xhr, textStatus, errorThrown) {\n"
                + "                var err = eval(\"(\" + xhr.responseText + \")\");\n"
                + "                BootstrapDialog.show({\n"
                + "                    title: \"Server Error\",\n"
                + "                    message: \"An error was encountered in the connection between the server and the client<br>\" + textStatus + \"<br>\" + err + \"<br>\" + errorThrown,\n"
                + "                    type: BootstrapDialog.TYPE_DANGER,\n"
                + "                    buttons: [{\n"
                + "                            label: 'Close',\n"
                + "                            action: function (dialogItself) {\n"
                + "                                dialogItself.close();\n"
                + "                            }\n"
                + "                        }]\n"
                + "                });\n"
                + "                try\n"
                + "                {\n"
                + "                    if (window.Pace)\n"
                + "                        window.Pace.stop();\n"
                + "                } catch (e)\n"
                + "                {\n"
                + "\n"
                + "                }\n"
                + "                //alert('Ooops this is never supposed to happen! How did it get through the servlet?\\n' + textStatus);\n"
                + "            }\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * \n"
                + "     * @param {type} data\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.performAngularFetch = function (data) {\n"
                + "        if (Pace)\n"
                + "            Pace.start();\n"
                + "\n"
                + "        //alert('angular fetch data  : ' + data);\n"
                + "        Pace.stop();\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Creates a new variable object translatable by the server\n"
                + "     * @param {type} name The name of the object\n"
                + "     * @param {type} object The physical object\n"
                + "     * @returns {Object} The new data bound object\n"
                + "     */\n"
                + "    $scope.dataVariable = function (name, object) {\n"
                + "        var newVariable = new Object();\n"
                + "        newVariable.variableName = name;\n"
                + "        newVariable.variableObject = object;\n"
                + "        return newVariable;\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Processes the response received from the ajax handler\n"
                + "     * @param {type} result\n"
                + "     *@param {type} status\n"
                + "     * @param {type} xhr\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processResponse = function (result, status, xhr) {\n"
                + "        $scope.processHtml(result);\n"
                + "        $scope.processCssReferences(result);\n"
                + "        $scope.processJSReferences(result);\n"
                + "        $scope.processCss(result);\n"
                + "        $scope.loadData(result);\n"
                + "        $scope.processReactions(result);\n"
                + "        $scope.processJsScripts(result);\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Adds the style tag to the html\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processCss = function (result)\n"
                + "    {\n"
                + "        $('head').append('<style>' + result + '</style>');\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Adds the JS Reference\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processJSReferences = function (result)\n"
                + "    {\n"
                + "        $.each(result.jsReferences, function (i, item) {\n"
                + "\n"
                + "            var len = $('script[src=\"' + item + '\"]').length;\n"
                + "            if (len === 0)\n"
                + "                $.cachedScript(item);\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Process the JavaScripts returned\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processJsScripts = function (result)\n"
                + "    {\n"
                + "        $.each(result.jsScripts, function (i, item) {\n"
                + "            var result = eval(item);\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Adds the css reference to the head\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processCssReferences = function (result)\n"
                + "    {\n"
                + "        $.each(result.cssLinks, function (i, item) {\n"
                + "            var len = $('link[href=\"' + item + '\"]').length;\n"
                + "            if (len === 0)\n"
                + "                $('head').append('<link rel=\"stylesheet\" type=\"text/css\" href=\"' + item + '\">');\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Goes through each component replacing its html\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processHtml = function (result) {\n"
                + "        $.each(result.components, function (i, item) {\n"
                + "            $('#' + item.id).replaceWith((item.html));\n"
                + "            $compile($('body').find('#' + item.id))($scope);\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Goes through each reaction performing each task\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processReactions = function (result) {\n"
                + "        $.each(result.reactions, function (i, item) {\n"
                + "            var title = item.reactionTitle;\n"
                + "            var message = item.reactionMessage;\n"
                + "            var type = item.reactionType;\n"
                + "            var dialogType = item.type;\n"
                + "            var timeout = item.actionTimeout;\n"
                + "\n"
                + "            if (type === 'DialogDisplay')\n"
                + "            {\n"
                + "                $scope.showDialog(title, message, dialogType);\n"
                + "            } else if (type === 'RedirectHome')\n"
                + "            {\n"
                + "                setTimeout('location.reload();', timeout);\n"
                + "            }\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * @param title The title of the dialog\n"
                + "     * @param message The message to display\n"
                + "     * @param type the type of dialog - Danger,Success,Warning,Primary,Information,Default\n"
                + "     */\n"
                + "    $scope.showDialog = function (title, message, type) {\n"
                + "        if (type === 'Danger')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_DANGER\n"
                + "            });\n"
                + "        else if (type === 'Success')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_SUCCESS\n"
                + "            });\n"
                + "        else if (type === 'Warning')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_WARNING\n"
                + "            });\n"
                + "        else if (type === 'Primary')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_INFO\n"
                + "            });\n"
                + "        else if (type === 'Information')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_INFO\n"
                + "            });\n"
                + "        else if (type === 'Default')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_INFO\n"
                + "            });\n"
                + "    };\n"
                + "\n"
                + "\n"
                + "\n"
                + "    /**\n"
                + "     * The event object that gets sent through\n"
                + "     * @param {type} $event jquery event\n"
                + "     * @returns {Object} The Event DTO\n"
                + "     */\n"
                + "    $scope.getEventObject = function ($event) {\n"
                + "        var newEvent = new Object();\n"
                + "        newEvent.altKey = $event.altKey;\n"
                + "        newEvent.ctrlKey = $event.ctrlKey;\n"
                + "        newEvent.bubbles = $event.bubbles;\n"
                + "        newEvent.cancelable = $event.cancelable;\n"
                + "        newEvent.clientX = $event.clientX;\n"
                + "        newEvent.clientY = $event.clientY;\n"
                + "        newEvent.componentID = $event.currentTarget.id;\n"
                + "        newEvent.detail = $event.detail;\n"
                + "        newEvent.eventPhase = $event.eventPhase;\n"
                + "        newEvent.metaKey = $event.metaKey;\n"
                + "        newEvent.offsetX = $event.offsetX;\n"
                + "        newEvent.offsetY = $event.offsetY;\n"
                + "        newEvent.pageX = $event.pageX;\n"
                + "        newEvent.pageY = $event.pageY;\n"
                + "        newEvent.screenX = $event.screenX;\n"
                + "        newEvent.screenY = $event.screenY;\n"
                + "        newEvent.shiftKey = $event.shiftKey;\n"
                + "        newEvent.type = $event.type;\n"
                + "        newEvent.data = $event.data;\n"
                + "        newEvent.target = $event.target.id;\n"
                + "        newEvent.which = $event.which;\n"
                + "        return newEvent;\n"
                + "    };\n"
                + "}); //end of controller\n"
                + "\n"
                + "    \n"
                + "})(window.angular);\n"
                + "\n"
                + "/**\n"
                + " * Loads up cached url script objects.\n"
                + " * Used when pulling scripts from the server\n"
                + " * $.cachedScript( \"ajax/test.js\" ).done(function( script, textStatus ) {});\n"
                + " * $.cachedScript( \"ajax/test.js\",{async:true).done(function( script, textStatus ) {});\n"
                + " * @param {type} url The URL to use\n"
                + " * @param {type} options Any $.ajax options\n"
                + " * \n"
                + " * @returns {jqXHR} The ajax object for chaining\n"
                + " */\n"
                + "jQuery.cachedScript = function (url, options) {\n"
                + "    // Allow user to set any option except for dataType, cache, and url\n"
                + "    options = $.extend(options || {}, {\n"
                + "        dataType: \"script\",\n"
                + "        cache: true,\n"
                + "        url: url,\n"
                + "        async: true\n"
                + "    });\n"
                + "    // Use $.ajax() since it is more flexible than $.getScript\n"
                + "    // Return the jqXHR object so we can chain callbacks\n"
                + "    return jQuery.ajax(options);\n"
                + "};</script>\n"
                + "		<script type=\"application/javascript\">$('#id').jstree({\n"
                + "  \"core\" : {\n"
                + "    \"data\" : {\n"
                + "      \"url\" : \"jwdata?component=id\",\n"
                + "      \"data\" : function (node, donefunction) {return node;}\n"
                + "    }\n"
                + "  }\n"
                + "});\n"
                + "</script>\n"
                + "	</body>\n"
                + "</html>", p.toString(true));
    }

    @Test
    public void testGetData()
    {

        Page p = getInstance();
        JSTree tree = new JSTree();
        tree.setID("id");
        JSTreeData data = new JSTreeData();
        JSTreeNode node = new JSTreeNode("id", "text");
        data.getNodes().add(node);

        Assert.assertEquals("[{\n"
                + "  \"id\" : \"id\",\n"
                + "  \"text\" : \"text\",\n"
                + "  \"children\" : false\n"
                + "}]", data.toString());

        System.out.println(data);
        soutDivider();
        tree.setData(data);
        System.out.println(tree.renderJavascript());
        soutDivider();
    }

    @Test
    public void testSetTheme()
    {
        Page p = getInstance();
        JSTree tree = new JSTree();
        tree.setID("id");
        tree.setTheme(new JSTreeDefaultDarkTheme());
        p.getBody().add(tree);
        System.out.println(p.toString(true));
        Assert.assertEquals("<!DOCTYPE html>\n"
                + "<html>\n"
                + "	<head>\n"
                + "		<link href=\"bower_components/jstree/dist/themes/default-dark/style.css\" rel=\"stylesheet\" type=\"text/css\">\n"
                + "	</head>\n"
                + "	<body id=\"body\" ng-app=\"jwApp\" ng-controller=\"jwController\">\n"
                + "		<div id=\"id\"></div>\n"
                + "		<!-- Angular Application -->\n"
                + "		<script src=\"bower_components/jquery-3/dist/jquery.js\" type=\"text/javascript\"></script>\n"
                + "		<script src=\"bower_components/jquery-migrate/jquery-migrate.js\" type=\"text/javascript\"></script>\n"
                + "		<script src=\"bower_components/angular/angular.js\" type=\"text/javascript\"></script>\n"
                + "		<script src=\"bower_components/jstree/dist/jstree.js\" type=\"text/javascript\"></script>\n"
                + "		<script type=\"application/javascript\">//***********************************\n"
                + "// Angular Implementation\n"
                + "//***********************************\n"
                + "(function (angular) {\n"
                + "    'use strict';\n"
                + "    \n"
                + "    /**\n"
                + "     * All Modules\n"
                + "     */\n"
                + "    var jwApp = angular.module('jwApp',[]);\n"
                + "    \n"
                + "    /**\n"
                + "     * All Directives\n"
                + "     */\n"
                + "    \n"
                + "    \n"
                + "    /**\n"
                + "     * All Controllers\n"
                + "     */\n"
                + "    /* global jwApp, BootstrapDialog */\n"
                + "\n"
                + "jwApp.controller('jwController', function ($scope, $compile, $parse, $timeout) {\n"
                + "\n"
                + "    var self = this;\n"
                + "    /**\n"
                + "     * Loads up the initial variables into angular\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope._init = function ()\n"
                + "    {\n"
                + "        try\n"
                + "        {\n"
                + "            if (window.Modernizr)\n"
                + "            {\n"
                + "                $scope.Modernizr = window.Modernizr;\n"
                + "            }\n"
                + "        } catch (e)\n"
                + "        {\n"
                + "            console.warn(\"moderniz not enabled\");\n"
                + "        }\n"
                + "\n"
                + "        var toGo = 'jwad?o=body';\n"
                + "        $.ajax({\n"
                + "            type: \"GET\",\n"
                + "            url: toGo,\n"
                + "            dataType: \"json\",\n"
                + "            contentType: 'application/json',\n"
                + "            mimeType: 'application/json',\n"
                + "            asynch: false,\n"
                + "            cache: false,\n"
                + "            converters: {\n"
                + "                'json': true\n"
                + "            },\n"
                + "            success: function (result, status, xhr) {\n"
                + "                //alert(\"result : \" + result);\n"
                + "                $scope.loadData(result);\n"
                + "            },\n"
                + "            fail: function (xhr, textStatus, errorThrown) {\n"
                + "                var err = eval(\"(\" + xhr.responseText + \")\");\n"
                + "                BootstrapDialog.show({\n"
                + "                    title: \"Server Error\",\n"
                + "                    message: \"An error was encountered during the initial phase between the server and the client.<br>\" + textStatus + \"<br>\" + err,\n"
                + "                    type: BootstrapDialog.TYPE_DANGER,\n"
                + "                    buttons: [{\n"
                + "                            label: 'Close',\n"
                + "                            action: function (dialogItself) {\n"
                + "                                dialogItself.close();\n"
                + "                            }\n"
                + "                        }]\n"
                + "                });\n"
                + "            }\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    $scope._init();\n"
                + "\n"
                + "    /**\n"
                + "     * Loads an angular JSON variables object from the server\n"
                + "     * @param {type} data\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.loadData = function (data) {\n"
                + "        $.each(data.variables, function (i, item) {\n"
                + "            var the_string = item.variableName;\n"
                + "            var model = $parse(the_string);\n"
                + "            model.assign($scope, item.variable);\n"
                + "        });\n"
                + "\n"
                + "        $timeout(function () {});\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Performs a post send to the server\n"
                + "     * @param {type} $event\n"
                + "     * @param {type} dataVariables\n"
                + "     * @param {type} eventId\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.perform = function ($event, dataVariables, eventId) {\n"
                + "        if (window.Pace)\n"
                + "            window.Pace.start();\n"
                + "        //alert('doing stuff');\n"
                + "        var eventStuff = $scope.getEventObject($event);\n"
                + "        //alert(JSON.stringify($event));\n"
                + "        var element = $event.currentTarget.id;\n"
                + "        var getdate = new Date();\n"
                + "        var article = new Object();\n"
                + "        article.componentId = element;\n"
                + "        article.eventType = $event.type;\n"
                + "        article.eventTypeFrom = $event.type;\n"
                + "        article.datetime = getdate;\n"
                + "        article.value = eventStuff;\n"
                + "        article.eventId = eventId;\n"
                + "\n"
                + "        article.variableData = [];\n"
                + "        for (var i = 0; i < dataVariables.length; i++)\n"
                + "        {\n"
                + "            var arrItem = dataVariables[i];\n"
                + "            try\n"
                + "            {\n"
                + "                var data = $scope.$eval(arrItem);\n"
                + "                if (data !== 'undefined')\n"
                + "                {\n"
                + "                    var jsonVariable = {};\n"
                + "                    jsonVariable.variableName = arrItem; //the name\n"
                + "                    jsonVariable.variableText = data; //transforms to string on the server via deserializer\n"
                + "                    jsonVariable.$jwid = data.$jwid;\n"
                + "                    article.variableData.push(jsonVariable);\n"
                + "                }\n"
                + "            } catch (e)\n"
                + "            {\n"
                + "                console.log(\"Unable to find variable \" + arrItem);\n"
                + "            }\n"
                + "        }\n"
                + "        //article.variableData = [].concat(dataVariables);\n"
                + "\n"
                + "        $.ajax({\n"
                + "            type: \"POST\",\n"
                + "            url: \"jwajax\",\n"
                + "            data: JSON.stringify(article),\n"
                + "            dataType: \"json\",\n"
                + "            contentType: 'application/json',\n"
                + "            mimeType: 'application/json',\n"
                + "            asynch: true,\n"
                + "            cache: true,\n"
                + "            converters: {\n"
                + "                'json': true\n"
                + "            },\n"
                + "            success: function (result, status, xhr) {\n"
                + "                $scope.processResponse(result, status, xhr);\n"
                + "                try\n"
                + "                {\n"
                + "                    if (window.Pace)\n"
                + "                        window.Pace.stop();\n"
                + "                } catch (e)\n"
                + "                {\n"
                + "\n"
                + "                }\n"
                + "            },\n"
                + "            fail: function (xhr, textStatus, errorThrown) {\n"
                + "                var err = eval(\"(\" + xhr.responseText + \")\");\n"
                + "                BootstrapDialog.show({\n"
                + "                    title: \"Server Error\",\n"
                + "                    message: \"An error was encountered in the connection between the server and the client<br>\" + textStatus + \"<br>\" + err + \"<br>\" + errorThrown,\n"
                + "                    type: BootstrapDialog.TYPE_DANGER,\n"
                + "                    buttons: [{\n"
                + "                            label: 'Close',\n"
                + "                            action: function (dialogItself) {\n"
                + "                                dialogItself.close();\n"
                + "                            }\n"
                + "                        }]\n"
                + "                });\n"
                + "                try\n"
                + "                {\n"
                + "                    if (window.Pace)\n"
                + "                        window.Pace.stop();\n"
                + "                } catch (e)\n"
                + "                {\n"
                + "\n"
                + "                }\n"
                + "                //alert('Ooops this is never supposed to happen! How did it get through the servlet?\\n' + textStatus);\n"
                + "            }\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * \n"
                + "     * @param {type} data\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.performAngularFetch = function (data) {\n"
                + "        if (Pace)\n"
                + "            Pace.start();\n"
                + "\n"
                + "        //alert('angular fetch data  : ' + data);\n"
                + "        Pace.stop();\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Creates a new variable object translatable by the server\n"
                + "     * @param {type} name The name of the object\n"
                + "     * @param {type} object The physical object\n"
                + "     * @returns {Object} The new data bound object\n"
                + "     */\n"
                + "    $scope.dataVariable = function (name, object) {\n"
                + "        var newVariable = new Object();\n"
                + "        newVariable.variableName = name;\n"
                + "        newVariable.variableObject = object;\n"
                + "        return newVariable;\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Processes the response received from the ajax handler\n"
                + "     * @param {type} result\n"
                + "     *@param {type} status\n"
                + "     * @param {type} xhr\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processResponse = function (result, status, xhr) {\n"
                + "        $scope.processHtml(result);\n"
                + "        $scope.processCssReferences(result);\n"
                + "        $scope.processJSReferences(result);\n"
                + "        $scope.processCss(result);\n"
                + "        $scope.loadData(result);\n"
                + "        $scope.processReactions(result);\n"
                + "        $scope.processJsScripts(result);\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Adds the style tag to the html\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processCss = function (result)\n"
                + "    {\n"
                + "        $('head').append('<style>' + result + '</style>');\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Adds the JS Reference\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processJSReferences = function (result)\n"
                + "    {\n"
                + "        $.each(result.jsReferences, function (i, item) {\n"
                + "\n"
                + "            var len = $('script[src=\"' + item + '\"]').length;\n"
                + "            if (len === 0)\n"
                + "                $.cachedScript(item);\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Process the JavaScripts returned\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processJsScripts = function (result)\n"
                + "    {\n"
                + "        $.each(result.jsScripts, function (i, item) {\n"
                + "            var result = eval(item);\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Adds the css reference to the head\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processCssReferences = function (result)\n"
                + "    {\n"
                + "        $.each(result.cssLinks, function (i, item) {\n"
                + "            var len = $('link[href=\"' + item + '\"]').length;\n"
                + "            if (len === 0)\n"
                + "                $('head').append('<link rel=\"stylesheet\" type=\"text/css\" href=\"' + item + '\">');\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Goes through each component replacing its html\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processHtml = function (result) {\n"
                + "        $.each(result.components, function (i, item) {\n"
                + "            $('#' + item.id).replaceWith((item.html));\n"
                + "            $compile($('body').find('#' + item.id))($scope);\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * Goes through each reaction performing each task\n"
                + "     * @param {type} result\n"
                + "     * @returns {undefined}\n"
                + "     */\n"
                + "    $scope.processReactions = function (result) {\n"
                + "        $.each(result.reactions, function (i, item) {\n"
                + "            var title = item.reactionTitle;\n"
                + "            var message = item.reactionMessage;\n"
                + "            var type = item.reactionType;\n"
                + "            var dialogType = item.type;\n"
                + "            var timeout = item.actionTimeout;\n"
                + "\n"
                + "            if (type === 'DialogDisplay')\n"
                + "            {\n"
                + "                $scope.showDialog(title, message, dialogType);\n"
                + "            } else if (type === 'RedirectHome')\n"
                + "            {\n"
                + "                setTimeout('location.reload();', timeout);\n"
                + "            }\n"
                + "        });\n"
                + "    };\n"
                + "\n"
                + "    /**\n"
                + "     * @param title The title of the dialog\n"
                + "     * @param message The message to display\n"
                + "     * @param type the type of dialog - Danger,Success,Warning,Primary,Information,Default\n"
                + "     */\n"
                + "    $scope.showDialog = function (title, message, type) {\n"
                + "        if (type === 'Danger')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_DANGER\n"
                + "            });\n"
                + "        else if (type === 'Success')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_SUCCESS\n"
                + "            });\n"
                + "        else if (type === 'Warning')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_WARNING\n"
                + "            });\n"
                + "        else if (type === 'Primary')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_INFO\n"
                + "            });\n"
                + "        else if (type === 'Information')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_INFO\n"
                + "            });\n"
                + "        else if (type === 'Default')\n"
                + "            BootstrapDialog.show({\n"
                + "                title: title,\n"
                + "                message: message,\n"
                + "                type: BootstrapDialog.TYPE_INFO\n"
                + "            });\n"
                + "    };\n"
                + "\n"
                + "\n"
                + "\n"
                + "    /**\n"
                + "     * The event object that gets sent through\n"
                + "     * @param {type} $event jquery event\n"
                + "     * @returns {Object} The Event DTO\n"
                + "     */\n"
                + "    $scope.getEventObject = function ($event) {\n"
                + "        var newEvent = new Object();\n"
                + "        newEvent.altKey = $event.altKey;\n"
                + "        newEvent.ctrlKey = $event.ctrlKey;\n"
                + "        newEvent.bubbles = $event.bubbles;\n"
                + "        newEvent.cancelable = $event.cancelable;\n"
                + "        newEvent.clientX = $event.clientX;\n"
                + "        newEvent.clientY = $event.clientY;\n"
                + "        newEvent.componentID = $event.currentTarget.id;\n"
                + "        newEvent.detail = $event.detail;\n"
                + "        newEvent.eventPhase = $event.eventPhase;\n"
                + "        newEvent.metaKey = $event.metaKey;\n"
                + "        newEvent.offsetX = $event.offsetX;\n"
                + "        newEvent.offsetY = $event.offsetY;\n"
                + "        newEvent.pageX = $event.pageX;\n"
                + "        newEvent.pageY = $event.pageY;\n"
                + "        newEvent.screenX = $event.screenX;\n"
                + "        newEvent.screenY = $event.screenY;\n"
                + "        newEvent.shiftKey = $event.shiftKey;\n"
                + "        newEvent.type = $event.type;\n"
                + "        newEvent.data = $event.data;\n"
                + "        newEvent.target = $event.target.id;\n"
                + "        newEvent.which = $event.which;\n"
                + "        return newEvent;\n"
                + "    };\n"
                + "}); //end of controller\n"
                + "\n"
                + "    \n"
                + "})(window.angular);\n"
                + "\n"
                + "/**\n"
                + " * Loads up cached url script objects.\n"
                + " * Used when pulling scripts from the server\n"
                + " * $.cachedScript( \"ajax/test.js\" ).done(function( script, textStatus ) {});\n"
                + " * $.cachedScript( \"ajax/test.js\",{async:true).done(function( script, textStatus ) {});\n"
                + " * @param {type} url The URL to use\n"
                + " * @param {type} options Any $.ajax options\n"
                + " * \n"
                + " * @returns {jqXHR} The ajax object for chaining\n"
                + " */\n"
                + "jQuery.cachedScript = function (url, options) {\n"
                + "    // Allow user to set any option except for dataType, cache, and url\n"
                + "    options = $.extend(options || {}, {\n"
                + "        dataType: \"script\",\n"
                + "        cache: true,\n"
                + "        url: url,\n"
                + "        async: true\n"
                + "    });\n"
                + "    // Use $.ajax() since it is more flexible than $.getScript\n"
                + "    // Return the jqXHR object so we can chain callbacks\n"
                + "    return jQuery.ajax(options);\n"
                + "};</script>\n"
                + "		<script type=\"application/javascript\">$('#id').jstree({\n"
                + "  \"core\" : {\n"
                + "    \"data\" : {\n"
                + "      \"url\" : \"jwdata?component=id\",\n"
                + "      \"data\" : function (node, donefunction) {return node;}\n"
                + "    },\n"
                + "    \"themes\" : {\n"
                + "      \"name\" : \"default-dark\"\n"
                + "    }\n"
                + "  }\n"
                + "});\n"
                + "</script>\n"
                + "	</body>\n"
                + "</html>", p.toString(true));
    }

}
